                                 ###########
                                 # phrases #
                                 ###########

## TODO

* make resalt and change-lock more user-friendly "safe"
* README intro
* allow changing comments :-P
* catch userError on wrong posix regexes
* check regexes ignorecase
* formular for pbkdf2 rounds
* license!

For more TODOs use `git grep TODO`

## Requires

* pbkdf
* drbg
* ansi-terminal
* regex-tdfa
* system-filepath
* hclip (also requires xclip or xsel on linux)

Try `cabal install ...` to get them.
Use `make` to compile.


## Short Intro

another TODO


#### Basic Usage

This annotation begins the helptext shown by the program with "phrases help".
It is extracted by awk in the makefile and embedded into the Haskell code:
%% BEGIN_HELPTEXT

$ phrases COMMAND [arguments]

Commands:

version     show version number
init FILE   create new container
info FILE   show information (version number) about container
open FILE   open container for reading and changing

migrate OLDVERSION NEWVERSION
            migrate container from old version to new one.
            See version command for supported versions.
            In general version numbers of containers corresponds to git tag of
            source code. If you forgot the version number of your storage file,
            open in hex editor and look for the version=X property.
dump FILE   Open container and dump serialized Storage object to file.
            Use with care.

Supported Versions:
  reading: 1, 2
  writing: 2

When running:

You can always simply press Enter to clear screen.
Type "help" to see list of available commands in prompt.

For more information see the README.
%% END_HELPTEXT

## Commands on prompt

%% BEGIN_PROMPTHELP
quit        Exit program (unsupported on some systems, try 'exit')
exit        Exit program (deprecated, use 'quit')
stats       Show stats about storage.
save        Save storage to file again (pretty useless).
change-lock Change passphrase of container.
resalt      Change permanent salt of container
test        Enter a passphrase and test if it matches the current one.
list REGEX  Search in names of entries for POSIX regex.
new TYPE    Create new entry, types: phrase, asym, field, data

With selected entry:
  plain       Show plaintext password on stdout.
  rename      Choose a new name
  comment     Change comment of entry
  delete      Delete entry.
  clear       Clear clipboard

Type-specific commands:
  phrase
    phrase          Change passphrase
    clipboard | cb  Copy data to clipboard.
  asym
    fingerprint  Set fingerprint
    load FILE    Load private key from file
    put FILE     Save private key to file
    fprintcb     Put fingerprint into clipboard
    privcb       Put private key into clipboard
    pubcb        Put public key into clipboard
  field
    input     Set input
    load FILE Load text data from file, aborts on non ASCII chars.
    put FILE  Save text to text file.
  data
    load FILE Load data from file.
    put FILE  Save data to file.
%% END_PROMPTHELP

## Notes on Security

* Since Haskell trades memory for speed, your passwords may end up all over
  your memory. You should check if your system applies appropriate memory
  protection measures.
* The hash of your passphrase is stored in memory, so the program can save
  your file after every change.
* The security of this program relies heavily on the modules listes in
  'Requirements'. I have not reviewed the code nor do i have to knowledge to
  review strong crypto algorithms. I simply assume that the algorithms provided
  in mainstream packages on hackage are well-imlemented.
* The randomness comes from System.Crypto.Random which uses your systems
  secure entropy. Make sure your system can provide secure entropy in the
  way required. This module seems to be untested on Windows. Refer to doc.
* Don't overdo the security here. You are going to post the password
  in your crappy browser anyways.

#### Under The Hood
## Haskell coding style:
* No exceptions in pure code.
* Document impure behaviour ( exitFailiure, exitSuccess, error, ... )
* Many else I don't know yet, still learning ...

## Embedded files
The help text and the GHC version are embedded into the code on compiletime
by Template Haskell. Have a look at EmbeddedContent.hs
When the embedded file content changed, run 'make clean' and then 'make'

## Storage file layout:

File:
|StorageProps|0|hash|hash|representation of Storage data type|
|plaintext     |encrypted                                    |

* length of one hash (SHA256): 32 bytes

StorageProps contains i.a.
  * length of salt: min 16 bytes
  * length of innersalt: min 16 bytes

The salt is not changed. Use 'resalt' to get new salt.
The innersalt is changed every time the file is saved to make sure the byte
stream from the DRBG is not the same as the previous one.
The two hashes are compared to see if the passphrase was correct, then the
contained serialized storage's hash is checked against one of them.
The lockhash is generated by running PBKDF2 on passphrase and salt.

How to decrypt:
  * readProps
    * read StorageProps
  * checkStorageProps
    * check them for sane values
  * decrypt
    * retrieve passphrase
    * put passphrase and salt into sha512PBKDF2
    * seed HashDRBG with PBKDF2 result concatenated with innersalt
    * xor byte stream from DRBG with rest of file
    * check if the two hashes match
  * checkHash
    * check if one hash and the SHA256 of the plaintext storage data match
    * use 'readMaybe' to cast String to Storage
  * set lockhash and props in Storage

How to encrypt:
  * clear props and lockhash from storage
  * generate hash of serialized storage
  * generate innersalt
  * seed HashDRBG with lockhash concatenated with new innersalt
  * construct plaintext to be encrypted: concat two verifiers and 'show storage'
  * xor byte stream from DRBG with plaintext

## The modules

* CryptoBackend (CryptoBackend.hs)
  All pure functions for en- and decryption.
* BasicUI (BasicUI.hs)
  IO functions doing the interesting IO things.
* EmbeddedContent (EmbeddedContent.hs)
  Provide the helptext and the ghc version by loading it on compiletime.
* Main (phrases.hs)
  Parsing of arguments, the prompt and tying together the basic IO things.

## Storage Data Type

All salts, hashes and data written to a file are saved as ByteStrings.
TODO: move to CryptoBackend.hs code

data StorageProps = StorageProps {
  version :: Int
    The version of the storage file.
    Only version 1 has no StorateProps field.
  salt_length :: Int
    The length of the salt, min: 16
  innersalt_length :: Int
    The length of the inner salt, min: 16
  pbkdf2_rounds :: Int
    The number of rounds to run the PBKDF, min: 150000
  pbkdf2_length :: Int
    The length of the generated key, min: 64
  salt :: ByteString
    The actual salt.
  innersalt :: ByteString
    The actual inner salt.

Storage
  props :: Maybe StorageProps
    The storage properties associated to this storage.
    Set to Nothing when Storage is serialized.
  lockhash :: Maybe ByteString
    The hashed passphrase to the container without the innersalt.
    Derieved by running PBKDF2 on passphrase and salt.
    Set to Nothing when Storage is serialized.
  [SEntry]
    The list of entries in the container.

SEntry
  Phrase
    name :: String
      The name of the passphrase, used for listing.
    comment :: String
      An arbitrary comment.
    phrase :: String
  Asym
    name :: String
      The name of the keypair, used for listing
    comment :: String
      An arbitrary comment.
    fingerprint :: String
      The connected fingerprint.
    public :: String
      The public key
    private :: String
      The private key
  Field
    name :: String
      The name of the field, used for listing
    field :: String
      Any printable ASCII data.

